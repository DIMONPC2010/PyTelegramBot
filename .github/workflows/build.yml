name: CICD
# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # The "build" job
  build-docker:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and Push Docker Image
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: dimonpc2010/pytelegrambot:latest
          cache-from: type=registry,ref=dimonpc2010/pytelegrambot:latest
          cache-to: type=inline

      - name: Deploy Image
        run: echo ${{ steps.docker_build.outputs.digest }}

  # The "deploy" job
  deploy:
    runs-on: ubuntu-latest
    needs: [build-docker]
    if: ${{ github.ref == 'refs/heads/master' && github.event_name == 'push' }} # Only run this workflow if it is master branch on push event
    steps:
      - uses: actions/checkout@v2

      # Deploy to server
      - name: multiple command
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.GCP_PY_BOT_HOST }}
          username: ${{ secrets.GCP_PY_BOT_USERNAME }}
          key: ${{ secrets.GCP_PY_BOT_SSH_KEY }}
          port: ${{ secrets.GCP_PY_BOT_SSH_PORT }}
          script: |
            export OPEN_API_KEY=${{ secrets.OPEN_API_KEY }}
            export TELEGRAM_API_KEY=${{ secrets.TELEGRAM_API_KEY }}
            docker stop pytelegrambot || true && docker rmi dimonpc2010/pytelegrambot
            docker pull dimonpc2010/pytelegrambot:latest
            docker run -d --rm --name pytelegrambot -p 8081:8081 dimonpc2010/pytelegrambot --env OPEN_API_KEY=${OPEN_API_KEY} TELEGRAM_API_KEY=${TELEGRAM_API_KEY}
      # Send slack alert after done pipeline
      #- name: Send slack notification
      #  uses: 8398a7/action-slack@v3
      #  with:
      #    status: custom
      #    fields: workflow,job,commit,repo,ref,author,took
      #    custom_payload: |
      #      {
      #        attachments: [{
      #          color: '${{ job.status }}' === 'success' ? 'good' : '${{ job.status }}' === 'failure' ? 'danger' : 'warning',
      #          text: `${process.env.AS_WORKFLOW}\n${process.env.AS_JOB} (${process.env.AS_COMMIT}) of ${process.env.AS_REPO}@${process.env.AS_REF} by ${process.env.AS_AUTHOR} ${{ job.status }} in ${process.env.AS_TOOK}`,
      #        }]
      #      }
      #  env:
      #    SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # required
      #  if: always() # Pick up events even if the job fails or is canceled.